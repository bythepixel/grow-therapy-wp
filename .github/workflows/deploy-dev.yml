name: Deploy to Dev (Feature-testing)
run-name: Deploy to Dev (Feature-testing) on ${{ github.ref_name }} by @${{ github.actor }}

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    environment: Dev (Feature-testing)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.KINSTA_SERVER_IP }}
          username: ${{ secrets.KINSTA_USERNAME }}
          password: ${{ secrets.KINSTA_PASSWORD }}
          port: ${{ secrets.KINSTA_PORT }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ DEPLOYMENT STARTED: Dev Environment"
            echo "üìÖ $(date)"
            echo "üîí Fail-fast mode: Any error will stop deployment immediately"
            echo ""
            
            cd /www/growtherapy_429/public
            echo "üìç Working directory: $(pwd)"
            
            # Health check FIRST - before making any changes
            echo "üè• PHASE 1: Pre-deployment health check..."
            echo "   Testing WordPress core functionality before any changes..."
            if wp core version --allow-root; then
              echo "   ‚úÖ WordPress core responding normally"
            else
              echo "‚ùå CRITICAL: WordPress health check failed - deployment stopped"
              echo "üí° Troubleshooting: Check WordPress installation and database connectivity"
              echo "   - Verify database connection"
              echo "   - Check WordPress core files"
              echo "   - Ensure wp-config.php is correct"
              exit 1
            fi
            
            # Check if critical plugins are available
            echo "   Checking current plugin availability..."
            if [ -d "wp-content/plugins/wp-graphql" ]; then
              echo "   ‚úì WPGraphQL: Available"
            else
              echo "   ‚ö† WPGraphQL: Not available"
            fi
            
            echo "‚úÖ Pre-deployment health check passed"
            echo ""
            
            # Create backup point before making any changes
            echo "üì¶ PHASE 2: Creating deployment backup..."
            git stash push -m "Pre-deployment backup $(date +%Y%m%d-%H%M%S)" || {
              echo "‚ùå CRITICAL: Failed to create backup - deployment stopped"
              echo "üí° Troubleshooting: Check disk space and git permissions"
              exit 1
            }
            echo "‚úÖ Backup created successfully"
            echo ""
            
            # Fetch and reset with error handling
            echo "üì• PHASE 3: Updating codebase..."
            echo "   Fetching latest changes from dev branch..."
            git fetch origin dev || {
              echo "‚ùå CRITICAL: Failed to fetch code - deployment stopped"
              echo "üí° Troubleshooting: Check network connectivity and git remote"
              exit 1
            }
            
            echo "   Resetting to latest dev branch..."
            git reset --hard origin/dev || {
              echo "‚ùå CRITICAL: Failed to reset code - deployment stopped"
              echo "üí° Troubleshooting: Check git working directory status"
              exit 1
            }
            
            echo "‚úÖ Codebase updated successfully"
            echo "   Latest commit: $(git log -1 --oneline)"
            echo ""
            
            # Check if Composer is available
            if command -v composer &> /dev/null; then
              echo "üîß PHASE 4: Plugin dependency management..."
              echo "   Composer version: $(composer --version | head -n1)"
              
              # Check if plugins are already installed with correct versions
              echo "   Analyzing current plugin state..."
              plugins_need_update=false
              
              if [ -d "wp-content/plugins/wp-graphql" ]; then
                echo "   ‚úì WPGraphQL: Already installed"
              else
                echo "   ‚ö† WPGraphQL: Not found, will install"
                plugins_need_update=true
              fi
              
              # Install dependencies with strict error handling
              if [ "$plugins_need_update" = true ]; then
                echo "   üì¶ Installing/updating plugin dependencies..."
              else
                echo "   üîç All plugins present, verifying installations..."
              fi
              
              # Try quiet install first, then verbose if it fails
              if COMPOSER_MEMORY_LIMIT=-1 composer install --no-dev --optimize-autoloader --no-interaction --quiet 2>/dev/null; then
                echo "   ‚úÖ Dependencies processed successfully"
              else
                echo "   ‚ö† Quiet install failed, attempting verbose mode..."
                if composer install --no-dev --optimize-autoloader --no-interaction; then
                  echo "   ‚úÖ Dependencies processed successfully (verbose mode)"
                else
                  echo "‚ùå CRITICAL: Composer install failed completely - deployment stopped"
                  echo "üí° Common causes:"
                  echo "   - Plugin version not found in repository"
                  echo "   - Dependency conflicts between plugins"
                  echo "   - Server requirements not met (PHP version, extensions)"
                  echo "   - Memory limits exceeded"
                  exit 1
                fi
              fi
              
              # List installed plugins
              echo "   üìã Current plugin inventory:"
              ls -la wp-content/plugins/ | grep -E "^d" | awk '{print $9}' | grep -v "^\.$" | grep -v "^\.\.$" | grep -v "^index\.php$" | sed 's/^/     - /'
              echo ""
              
              # Verify plugins are available
              echo "üîç PHASE 5: Plugin availability verification..."
              echo "   Verifying required plugins are available..."
              
              if [ -d "wp-content/plugins/wp-graphql" ]; then
                echo "   ‚úÖ WPGraphQL: Available for use"
              else
                echo "‚ùå CRITICAL: WPGraphQL plugin missing after installation - deployment stopped"
                echo "üí° Troubleshooting: Check Composer installation logs and disk space"
                exit 1
              fi
              
              echo "‚úÖ All required plugins are available"
              echo ""
              
              # Final health check after all changes
              echo "üè• PHASE 6: Post-deployment health verification..."
              echo "   Testing WordPress core functionality after changes..."
              if wp core version --allow-root; then
                echo "   ‚úÖ WordPress core responding normally"
              else
                echo "‚ùå CRITICAL: WordPress health check failed after deployment - deployment stopped"
                echo "üí° Troubleshooting: Recent changes may have broken WordPress"
                echo "   - Check plugin compatibility"
                echo "   - Verify database integrity"
                echo "   - Review error logs"
                exit 1
              fi
              
            else
              echo "‚ùå CRITICAL: Composer not found - deployment stopped"
              echo "üí° Action required: Contact Kinsta support to install Composer"
              exit 1
            fi
            
            echo ""
            echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
            echo "‚úÖ All phases completed without errors"
            echo "‚úÖ All required plugins are available"
            echo "‚úÖ WordPress health check passed"
            echo "‚úÖ Site is fully functional and ready for use"
            echo ""
            echo "üìä DEPLOYMENT SUMMARY:"
            echo "   Environment: Dev (Feature-testing)"
            echo "   Branch: dev"
            echo "   Completed: $(date)"
            echo "   Duration: $(($(date +%s) - $(date +%s))) seconds"
            echo "=== Plugin deployment complete ==="
