<?php
/**
 * Custom rewrites for Events CPT and Event Categories taxonomy
 * Add this code to your theme's functions.php file or a custom plugin
 */

function custom_event_rewrites() {
    // Base slug for events
    $event_base = 'events';
    
    // 1. Event CPT archive: domain.com/events/
    // This should work automatically with your has_archive setting, but we can ensure it
    add_rewrite_rule(
        '^' . $event_base . '/?$',
        'index.php?post_type=event',
        'top'
    );
    
    // 2. Event category taxonomy archive: domain.com/events/{event-category-slug}/
    add_rewrite_rule(
        '^' . $event_base . '/([^/]+)/?$',
        'index.php?event-category=$matches[1]',
        'top'
    );
    
    // 3. Single event with category: domain.com/events/{event-category-slug}/{event-post-slug}
    add_rewrite_rule(
        '^' . $event_base . '/([^/]+)/([^/]+)/?$',
        'index.php?event-category=$matches[1]&event=$matches[2]',
        'top'
    );
    
    // 4. Pagination for event category archives
    add_rewrite_rule(
        '^' . $event_base . '/([^/]+)/page/([0-9]{1,})/?$',
        'index.php?event-category=$matches[1]&paged=$matches[2]',
        'top'
    );
    
    // 5. Pagination for main event archive
    add_rewrite_rule(
        '^' . $event_base . '/page/([0-9]{1,})/?$',
        'index.php?post_type=event&paged=$matches[1]',
        'top'
    );
    
    // Note: Individual event pagination is disabled in ACF config (pages: "0")
    // Archive pagination above is still needed for event listings
}
add_action('init', 'custom_event_rewrites');

/**
 * Modify the permalink structure for event posts
 * This ensures links generated by WordPress follow our custom structure
 */
function custom_event_permalink($permalink, $post) {
    if ($post->post_type !== 'event') {
        return $permalink;
    }
    
    // Get the event categories for this post
    $terms = wp_get_post_terms($post->ID, 'event-category');
    
    if (!empty($terms) && !is_wp_error($terms)) {
        // Use the first category if multiple exist
        $category_slug = $terms[0]->slug;
        return home_url("/events/{$category_slug}/{$post->post_name}/");
    } else {
        // Fallback if no category is assigned - you might want to handle this differently
        return home_url("/events/uncategorized/{$post->post_name}/");
    }
}
add_filter('post_type_link', 'custom_event_permalink', 10, 2);

/**
 * Modify the term link for event categories
 * This ensures taxonomy archive links follow our custom structure
 */
function custom_event_category_link($link, $term, $taxonomy) {
    if ($taxonomy !== 'event-category') {
        return $link;
    }
    
    return home_url("/events/{$term->slug}/");
}
add_filter('term_link', 'custom_event_category_link', 10, 3);

/**
 * Handle query vars for our custom structure
 * This ensures WordPress recognizes our custom URL parameters
 */
function custom_event_query_vars($vars) {
    $vars[] = 'event';
    $vars[] = 'event-category';
    return $vars;
}
add_filter('query_vars', 'custom_event_query_vars');

/**
 * Parse the request and set up proper query
 * This handles the logic for determining what content to show
 */
function custom_event_parse_request($wp) {
    // Check if we're dealing with event-related queries
    if (!isset($wp->query_vars['event-category']) && !isset($wp->query_vars['event'])) {
        return;
    }
    
    // Single event post
    if (isset($wp->query_vars['event-category']) && isset($wp->query_vars['event'])) {
        $event_slug = $wp->query_vars['event'];
        $category_slug = $wp->query_vars['event-category'];
        
        // Find the event post
        $event_query = new WP_Query(array(
            'post_type' => 'event',
            'name' => $event_slug,
            'posts_per_page' => 1
        ));
        
        if ($event_query->have_posts()) {
            $post = $event_query->posts[0];
            
            // Verify this post has the correct category
            $post_terms = wp_get_post_terms($post->ID, 'event-category');
            $has_category = false;
            
            foreach ($post_terms as $term) {
                if ($term->slug === $category_slug) {
                    $has_category = true;
                    break;
                }
            }
            
            if ($has_category) {
                // Set up single post query
                $wp->query_vars['post_type'] = 'event';
                $wp->query_vars['name'] = $event_slug;
                unset($wp->query_vars['event']);
                unset($wp->query_vars['event-category']);
            } else {
                // Category doesn't match - show 404
                $wp->query_vars['error'] = '404';
            }
        } else {
            // Post not found
            $wp->query_vars['error'] = '404';
        }
    }
    // Event category archive
    elseif (isset($wp->query_vars['event-category']) && !isset($wp->query_vars['event'])) {
        $category_slug = $wp->query_vars['event-category'];
        
        // Verify the category exists
        $term = get_term_by('slug', $category_slug, 'event-category');
        
        if ($term) {
            // Set up taxonomy archive query
            $wp->query_vars['taxonomy'] = 'event-category';
            $wp->query_vars['term'] = $category_slug;
            unset($wp->query_vars['event-category']);
        } else {
            // Category not found
            $wp->query_vars['error'] = '404';
        }
    }
}
add_action('parse_request', 'custom_event_parse_request');

/**
 * Flush rewrite rules on theme activation
 * Add this to ensure rules are registered properly
 */
function flush_event_rewrites() {
    custom_event_rewrites();
    flush_rewrite_rules();
}
add_action('after_switch_theme', 'flush_event_rewrites');

/**
 * Optional: Add a function to manually flush rewrites
 * You can call this function or visit wp-admin and go to Settings > Permalinks to flush
 */
function manual_flush_event_rewrites() {
    if (current_user_can('manage_options')) {
        flush_rewrite_rules();
    }
}
// Uncomment the line below if you want to flush on every admin page load (remove after testing)
// add_action('admin_init', 'manual_flush_event_rewrites');